#include "sdk.h"
#include <iostream>

// Open Device handle
HANDLE sdk::getRTCoreHandle()
{
	return CreateFile(L"\\\\.\\RTCore64", GENERIC_READ, 0, nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nullptr);
}

// Map in the process user-space
PVOID sdk::mapPhysical(const HANDLE _In_& hDevice, const PVOID _In_& address, const DWORD _In_& numberOfBytes, BOOL _Out_& status)
{
	RTCore_MapProc rtmap;

	DWORD bytes{};
	PVOID addr{ nullptr };

	if (!VERIFY_RANGE((DWORD64)address, numberOfBytes)) // verify the address range 
	{
		status = 0;
		return nullptr;
	}


	rtmap.baseAddress = address;
	rtmap.busInf = nullptr;
	rtmap.numberOfBytes = numberOfBytes;

	status = DeviceIoControl(hDevice, IOCTL_MAP_PHYSICAL_SET, &rtmap, sizeof(rtmap), &addr, sizeof(PVOID), &bytes, nullptr);

	return addr;
}

// unmap the mapped user-space address
void sdk::unmapPhysical(const HANDLE _In_& hDevice, const PVOID _In_& address, BOOL _Out_& status)
{
	DWORD bytes;
	PVOID buffer[1]{ address };
	status = DeviceIoControl(hDevice, IOCTL_UNMAP_PHYSICAL_SET, buffer, sizeof(buffer), nullptr, NULL, &bytes, nullptr);
}

// Map in the system-space
PVOID sdk::mapPhysicalSystem(const HANDLE _In_& hDevice, const PVOID _In_& address, const DWORD _In_& numberOfBytes, BOOL _Out_& status)
{
	RTCore_MapSystem rtmap;

	DWORD bytes{};
	PVOID addr{ nullptr };

	if (!VERIFY_RANGE((DWORD64)address, numberOfBytes)) // verify the address range 
	{
		status = 0;
		return nullptr;
	}


	rtmap.baseAddress = address;
	rtmap.busInf = nullptr;
	rtmap.numberOfBytes = numberOfBytes;

	status = DeviceIoControl(hDevice, IOCTL_MAP_PHYSICAL_SYSTEM_SET, &rtmap, sizeof(rtmap), &rtmap, sizeof(rtmap), &bytes, nullptr);

	return rtmap.virtualAddr;
}

// unmap the mapped system-space address
void sdk::unmapPhysicalSystem(const HANDLE _In_& hDevice, const PVOID _In_& address, const DWORD _In_& numberOfBytes, BOOL _Out_& status)
{


	RTCore_MapSystem rtmap;
	DWORD bytes;

	rtmap.virtualAddr = address;
	rtmap.numberOfBytes = numberOfBytes;

	status = DeviceIoControl(hDevice, IOCTL_UNMAP_PHYSICAL_SYSTEM_SET, &rtmap, sizeof(rtmap), nullptr, NULL, &bytes, nullptr);

}


// read MSR 
DWORD64 sdk::readMSR(const HANDLE _In_& hDevice, const DWORD _In_& reg, BOOL _Out_& status)
{
	DWORD bytes;
	RTCore_MSR rtmsr;
	rtmsr.reg = reg;
	rtmsr.hightVal = 0;
	rtmsr.lowVal = 0;

	status = DeviceIoControl(hDevice, IOCTL_READ_MSR_SET, &rtmsr, sizeof(rtmsr), &rtmsr, sizeof(rtmsr), &bytes, nullptr);

	return ((DWORD64)rtmsr.hightVal << 32) | rtmsr.lowVal;
}

